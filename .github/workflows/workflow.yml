name: workflow.yml
on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-stryker
          dotnet tool install --global dotnet-sonarscanner

      - name: Application Version
        id: semver-app
        uses: paulhatch/semantic-version@v5.4.0
        with:
          bump_each_commit: true
          bump_each_commit_patch_pattern: 'bugfix'
          tag_prefix: "v"

      - name: Display Version
        run: echo "Generated version is ${{ steps.semver-app.outputs.version}}"
        
      - name: Push generated tag
        run: |
          git fetch --tags
          TAG="v${{ steps.semver-app.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping push."
          else
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag $TAG
            git push origin $TAG
          fi
      
        
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: |
          dotnet test --collect:"XPlat Code Coverage" --results-directory coverage

      - name: Generate report
        run: |
          reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" -targetdir:coverage-report -reporttypes:Html

      - name: Run Mutation Tests
        run: |
          dotnet stryker --threshold-high 80

      - name: Collect Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/**/coverage.cobertura.xml

      - name: Collect Stryker Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-report
          path: StrykerOutput

      - name: Check Secret Variables
        run: |
          echo "Sonar URL: ${{ vars.VARIABLE_SONAR_URL }}"
          echo "Sonar Token: ${{ secrets.SECRET_SONAR_TOKEN }}"

      - name: Start Static Code Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"SECRET-BobsBBQ" \
            /d:sonar.host.url="${{ vars.VARIABLE_SONAR_URL }}" \
            /d:sonar.token="${{ secrets.SECRET_SONAR_TOKEN }}" \
            /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
            /d:sonar.inclusions="BobsBBQApi/BLL/**" \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.qualitygate.timeout=300
      
      - name: Build
        run: dotnet build

      - name: Run unit tests
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate sonar report
        run: |
          reportgenerator \
          -reports:TestResults/**/coverage.cobertura.xml \
          -targetdir:coverage-report \
          -reporttypes:SonarQube
          
      - name: Complete Static Code Analysis
        run: |
          dotnet sonarscanner end \
            /d:sonar.token="${{secrets.SECRET_SONAR_TOKEN}}"
          
      - name: Deliver database migrations to staging server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          source: "dbmigration/**"
          target: "dowa/dbmigration"
          strip_components: 1
          overwrite: true
          debug: true
      
      
      
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.SECRET_GITHUB_TOKEN }}
          
      - name: Verify Docker Login
        run: docker info

      - name: Build and push Docker image 
        run: |
          cd Docker
          cd ..
          docker build -t ghcr.io/jakoc/bobsbbqsolution:latest -f Docker/Dockerfile .
          docker push ghcr.io/jakoc/bobsbbqsolution:latest
          
      - name: List all Docker images
        run: docker images
        
      - name: Check pushed image tags
        run: |
          curl -u ${{ secrets.GHCR_USERNAME }}:${{ secrets.SECRET_GITHUB_TOKEN }} https://ghcr.io/v2/jakoc/bobsbbqsolution/tags/list
        
      
      - name: Verify Docker push result
        run: |       
          echo "Checking pushed image tags..."
          curl -u ${{ secrets.GHCR_USERNAME }}:${{ secrets.SECRET_GITHUB_TOKEN }} https://ghcr.io/v2/jakoc/bobsbbqsolution/tags/list

      - name: Deliver Compose file to staging server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          source: "Docker/docker-compose.yml"
          target: "dowa/docker"
          debug: true

      - name: Deploy and restart services
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          script: |
            cd dowa/docker/Docker
            docker compose pull
            docker compose up -d --force-recreate
          
            
      - name: Setup K6
        run: |
          curl -LO https://github.com/k6io/k6/releases/download/v0.44.0/k6-v0.44.0-linux-amd64.tar.gz
          tar -xvzf k6-v0.44.0-linux-amd64.tar.gz
          sudo mv k6-v0.44.0-linux-amd64/k6 /usr/local/bin/
          k6 version

      - name: Run K6 Spike Test
        run: k6 run k6-tests/spike-test.js